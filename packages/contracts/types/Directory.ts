/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type FileStruct = {
  size: PromiseOrValue<BigNumberish>;
  contentType: PromiseOrValue<string>;
  contentEncoding: PromiseOrValue<string>;
  checksums: PromiseOrValue<BytesLike>[];
};

export type FileStructOutput = [BigNumber, string, string, string[]] & {
  size: BigNumber;
  contentType: string;
  contentEncoding: string;
  checksums: string[];
};

export interface DirectoryInterface extends utils.Interface {
  functions: {
    "fileExists(string)": FunctionFragment;
    "fileStore()": FunctionFragment;
    "filenames(uint256)": FunctionFragment;
    "files(string)": FunctionFragment;
    "readFile(string)": FunctionFragment;
    "writeFile(string,(uint256,string,string,bytes32[]))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "fileExists"
      | "fileStore"
      | "filenames"
      | "files"
      | "readFile"
      | "writeFile"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "fileExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "fileStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "filenames",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "files",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "readFile",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "writeFile",
    values: [PromiseOrValue<string>, FileStruct]
  ): string;

  decodeFunctionResult(functionFragment: "fileExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fileStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "filenames", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "files", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readFile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "writeFile", data: BytesLike): Result;

  events: {};
}

export interface Directory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DirectoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fileExists(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    fileStore(overrides?: CallOverrides): Promise<[string]>;

    filenames(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    files(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    readFile(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[FileStructOutput] & { file: FileStructOutput }>;

    writeFile(
      filename: PromiseOrValue<string>,
      file: FileStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  fileExists(
    filename: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  fileStore(overrides?: CallOverrides): Promise<string>;

  filenames(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  files(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  readFile(
    filename: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<FileStructOutput>;

  writeFile(
    filename: PromiseOrValue<string>,
    file: FileStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    fileExists(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    fileStore(overrides?: CallOverrides): Promise<string>;

    filenames(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    files(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    readFile(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<FileStructOutput>;

    writeFile(
      filename: PromiseOrValue<string>,
      file: FileStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    fileExists(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fileStore(overrides?: CallOverrides): Promise<BigNumber>;

    filenames(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    files(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readFile(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    writeFile(
      filename: PromiseOrValue<string>,
      file: FileStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    fileExists(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fileStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    filenames(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    files(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readFile(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    writeFile(
      filename: PromiseOrValue<string>,
      file: FileStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
