/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type ContentStruct = {
  checksum: PromiseOrValue<BytesLike>;
  pointer: PromiseOrValue<string>;
};

export type ContentStructOutput = [string, string] & {
  checksum: string;
  pointer: string;
};

export type FileStruct = {
  size: PromiseOrValue<BigNumberish>;
  contents: ContentStruct[];
};

export type FileStructOutput = [BigNumber, ContentStructOutput[]] & {
  size: BigNumber;
  contents: ContentStructOutput[];
};

export interface FileReaderInterface extends utils.Interface {
  functions: {
    "getFile(bytes32)": FunctionFragment;
    "readFile((uint256,(bytes32,address)[]))": FunctionFragment;
    "readFile(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getFile"
      | "readFile((uint256,(bytes32,address)[]))"
      | "readFile(string)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getFile",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "readFile((uint256,(bytes32,address)[]))",
    values: [FileStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "readFile(string)",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "getFile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readFile((uint256,(bytes32,address)[]))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readFile(string)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface FileReader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FileReaderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getFile(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[FileStructOutput] & { file: FileStructOutput }>;

    "readFile((uint256,(bytes32,address)[]))"(
      file: FileStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    "readFile(string)"(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;
  };

  getFile(
    checksum: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<FileStructOutput>;

  "readFile((uint256,(bytes32,address)[]))"(
    file: FileStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  "readFile(string)"(
    filename: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    getFile(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<FileStructOutput>;

    "readFile((uint256,(bytes32,address)[]))"(
      file: FileStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    "readFile(string)"(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getFile(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "readFile((uint256,(bytes32,address)[]))"(
      file: FileStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "readFile(string)"(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getFile(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "readFile((uint256,(bytes32,address)[]))"(
      file: FileStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "readFile(string)"(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
