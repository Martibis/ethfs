/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type FileStruct = {
  size: PromiseOrValue<BigNumberish>;
  contentType: PromiseOrValue<string>;
  contentEncoding: PromiseOrValue<string>;
  checksums: PromiseOrValue<BytesLike>[];
};

export type FileStructOutput = [BigNumber, string, string, string[]] & {
  size: BigNumber;
  contentType: string;
  contentEncoding: string;
  checksums: string[];
};

export interface FileStoreInterface extends utils.Interface {
  functions: {
    "_checksums(uint256)": FunctionFragment;
    "_chunks(bytes32)": FunctionFragment;
    "checksumExists(bytes32)": FunctionFragment;
    "chunkSize(bytes32)": FunctionFragment;
    "readBytes(uint256,bytes32[])": FunctionFragment;
    "readChunk(bytes32)": FunctionFragment;
    "readChunks(bytes32[])": FunctionFragment;
    "readFile(bytes32)": FunctionFragment;
    "readFileData((uint256,string,string,bytes32[]))": FunctionFragment;
    "readFileData(bytes32)": FunctionFragment;
    "writeChunk(bytes)": FunctionFragment;
    "writeChunks(bytes[])": FunctionFragment;
    "writeFile(string,string,bytes32[])": FunctionFragment;
    "writeFile(string,string,bytes[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_checksums"
      | "_chunks"
      | "checksumExists"
      | "chunkSize"
      | "readBytes"
      | "readChunk"
      | "readChunks"
      | "readFile"
      | "readFileData((uint256,string,string,bytes32[]))"
      | "readFileData(bytes32)"
      | "writeChunk"
      | "writeChunks"
      | "writeFile(string,string,bytes32[])"
      | "writeFile(string,string,bytes[])"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_checksums",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_chunks",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "checksumExists",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "chunkSize",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "readBytes",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "readChunk",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "readChunks",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "readFile",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "readFileData((uint256,string,string,bytes32[]))",
    values: [FileStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "readFileData(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "writeChunk",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "writeChunks",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "writeFile(string,string,bytes32[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "writeFile(string,string,bytes[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "_checksums", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_chunks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checksumExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chunkSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readBytes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readChunk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readChunks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readFile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readFileData((uint256,string,string,bytes32[]))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readFileData(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "writeChunk", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "writeChunks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writeFile(string,string,bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writeFile(string,string,bytes[])",
    data: BytesLike
  ): Result;

  events: {
    "NewChunk(bytes32,uint256)": EventFragment;
    "NewFile(bytes32,uint256,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewChunk"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFile"): EventFragment;
}

export interface NewChunkEventObject {
  checksum: string;
  size: BigNumber;
}
export type NewChunkEvent = TypedEvent<
  [string, BigNumber],
  NewChunkEventObject
>;

export type NewChunkEventFilter = TypedEventFilter<NewChunkEvent>;

export interface NewFileEventObject {
  checksum: string;
  size: BigNumber;
  contentType: string;
  contentEncoding: string;
}
export type NewFileEvent = TypedEvent<
  [string, BigNumber, string, string],
  NewFileEventObject
>;

export type NewFileEventFilter = TypedEventFilter<NewFileEvent>;

export interface FileStore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FileStoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _checksums(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _chunks(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    checksumExists(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    chunkSize(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { size: BigNumber }>;

    readBytes(
      size: PromiseOrValue<BigNumberish>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    readChunk(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { chunk: string }>;

    readChunks(
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { chunks: string[] }>;

    readFile(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[FileStructOutput] & { file: FileStructOutput }>;

    "readFileData((uint256,string,string,bytes32[]))"(
      file: FileStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    "readFileData(bytes32)"(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    writeChunk(
      chunk: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    writeChunks(
      chunks: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "writeFile(string,string,bytes32[])"(
      contentType: PromiseOrValue<string>,
      contentEncoding: PromiseOrValue<string>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "writeFile(string,string,bytes[])"(
      contentType: PromiseOrValue<string>,
      contentEncoding: PromiseOrValue<string>,
      chunks: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _checksums(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  _chunks(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  checksumExists(
    checksum: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  chunkSize(
    checksum: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  readBytes(
    size: PromiseOrValue<BigNumberish>,
    checksums: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<string>;

  readChunk(
    checksum: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  readChunks(
    checksums: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  readFile(
    checksum: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<FileStructOutput>;

  "readFileData((uint256,string,string,bytes32[]))"(
    file: FileStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  "readFileData(bytes32)"(
    checksum: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  writeChunk(
    chunk: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  writeChunks(
    chunks: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "writeFile(string,string,bytes32[])"(
    contentType: PromiseOrValue<string>,
    contentEncoding: PromiseOrValue<string>,
    checksums: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "writeFile(string,string,bytes[])"(
    contentType: PromiseOrValue<string>,
    contentEncoding: PromiseOrValue<string>,
    chunks: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _checksums(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    _chunks(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    checksumExists(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    chunkSize(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readBytes(
      size: PromiseOrValue<BigNumberish>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string>;

    readChunk(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    readChunks(
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    readFile(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<FileStructOutput>;

    "readFileData((uint256,string,string,bytes32[]))"(
      file: FileStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    "readFileData(bytes32)"(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    writeChunk(
      chunk: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    writeChunks(
      chunks: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    "writeFile(string,string,bytes32[])"(
      contentType: PromiseOrValue<string>,
      contentEncoding: PromiseOrValue<string>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<
      [string, FileStructOutput] & { checksum: string; file: FileStructOutput }
    >;

    "writeFile(string,string,bytes[])"(
      contentType: PromiseOrValue<string>,
      contentEncoding: PromiseOrValue<string>,
      chunks: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<
      [string, FileStructOutput] & { checksum: string; file: FileStructOutput }
    >;
  };

  filters: {
    "NewChunk(bytes32,uint256)"(
      checksum?: PromiseOrValue<BytesLike> | null,
      size?: null
    ): NewChunkEventFilter;
    NewChunk(
      checksum?: PromiseOrValue<BytesLike> | null,
      size?: null
    ): NewChunkEventFilter;

    "NewFile(bytes32,uint256,string,string)"(
      checksum?: PromiseOrValue<BytesLike> | null,
      size?: null,
      contentType?: null,
      contentEncoding?: null
    ): NewFileEventFilter;
    NewFile(
      checksum?: PromiseOrValue<BytesLike> | null,
      size?: null,
      contentType?: null,
      contentEncoding?: null
    ): NewFileEventFilter;
  };

  estimateGas: {
    _checksums(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _chunks(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checksumExists(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chunkSize(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readBytes(
      size: PromiseOrValue<BigNumberish>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readChunk(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readChunks(
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readFile(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "readFileData((uint256,string,string,bytes32[]))"(
      file: FileStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "readFileData(bytes32)"(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    writeChunk(
      chunk: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    writeChunks(
      chunks: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "writeFile(string,string,bytes32[])"(
      contentType: PromiseOrValue<string>,
      contentEncoding: PromiseOrValue<string>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "writeFile(string,string,bytes[])"(
      contentType: PromiseOrValue<string>,
      contentEncoding: PromiseOrValue<string>,
      chunks: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _checksums(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _chunks(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checksumExists(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chunkSize(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readBytes(
      size: PromiseOrValue<BigNumberish>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readChunk(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readChunks(
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readFile(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "readFileData((uint256,string,string,bytes32[]))"(
      file: FileStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "readFileData(bytes32)"(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    writeChunk(
      chunk: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    writeChunks(
      chunks: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "writeFile(string,string,bytes32[])"(
      contentType: PromiseOrValue<string>,
      contentEncoding: PromiseOrValue<string>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "writeFile(string,string,bytes[])"(
      contentType: PromiseOrValue<string>,
      contentEncoding: PromiseOrValue<string>,
      chunks: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
