/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type ContentStruct = {
  checksum: PromiseOrValue<BytesLike>;
  pointer: PromiseOrValue<string>;
};

export type ContentStructOutput = [string, string] & {
  checksum: string;
  pointer: string;
};

export type FileStruct = {
  size: PromiseOrValue<BigNumberish>;
  contents: ContentStruct[];
};

export type FileStructOutput = [BigNumber, ContentStructOutput[]] & {
  size: BigNumber;
  contents: ContentStructOutput[];
};

export interface FileStoreInterface extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "contentStore()": FunctionFragment;
    "createFile(string,bytes32[])": FunctionFragment;
    "createFile(string,bytes32[],bytes)": FunctionFragment;
    "deleteFile(string)": FunctionFragment;
    "fileExists(string)": FunctionFragment;
    "files(string)": FunctionFragment;
    "getChecksum(string)": FunctionFragment;
    "getFile(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOwnership"
      | "contentStore"
      | "createFile(string,bytes32[])"
      | "createFile(string,bytes32[],bytes)"
      | "deleteFile"
      | "fileExists"
      | "files"
      | "getChecksum"
      | "getFile"
      | "owner"
      | "pendingOwner"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contentStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createFile(string,bytes32[])",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createFile(string,bytes32[],bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteFile",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "fileExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "files",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChecksum",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFile",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contentStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFile(string,bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFile(string,bytes32[],bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deleteFile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fileExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "files", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChecksum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "FileCreated(string,bytes32,string,uint256,bytes)": EventFragment;
    "FileDeleted(string,bytes32,string)": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FileCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FileDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface FileCreatedEventObject {
  indexedFilename: string;
  checksum: string;
  filename: string;
  size: BigNumber;
  metadata: string;
}
export type FileCreatedEvent = TypedEvent<
  [string, string, string, BigNumber, string],
  FileCreatedEventObject
>;

export type FileCreatedEventFilter = TypedEventFilter<FileCreatedEvent>;

export interface FileDeletedEventObject {
  indexedFilename: string;
  checksum: string;
  filename: string;
}
export type FileDeletedEvent = TypedEvent<
  [string, string, string],
  FileDeletedEventObject
>;

export type FileDeletedEventFilter = TypedEventFilter<FileDeletedEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface FileStore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FileStoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contentStore(overrides?: CallOverrides): Promise<[string]>;

    "createFile(string,bytes32[])"(
      filename: PromiseOrValue<string>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createFile(string,bytes32[],bytes)"(
      filename: PromiseOrValue<string>,
      checksums: PromiseOrValue<BytesLike>[],
      extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteFile(
      filename: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fileExists(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    files(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getChecksum(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { checksum: string }>;

    getFile(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[FileStructOutput] & { file: FileStructOutput }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contentStore(overrides?: CallOverrides): Promise<string>;

  "createFile(string,bytes32[])"(
    filename: PromiseOrValue<string>,
    checksums: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createFile(string,bytes32[],bytes)"(
    filename: PromiseOrValue<string>,
    checksums: PromiseOrValue<BytesLike>[],
    extraData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteFile(
    filename: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fileExists(
    filename: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  files(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getChecksum(
    filename: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getFile(
    filename: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<FileStructOutput>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    contentStore(overrides?: CallOverrides): Promise<string>;

    "createFile(string,bytes32[])"(
      filename: PromiseOrValue<string>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<FileStructOutput>;

    "createFile(string,bytes32[],bytes)"(
      filename: PromiseOrValue<string>,
      checksums: PromiseOrValue<BytesLike>[],
      extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<FileStructOutput>;

    deleteFile(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    fileExists(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    files(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getChecksum(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getFile(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<FileStructOutput>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FileCreated(string,bytes32,string,uint256,bytes)"(
      indexedFilename?: PromiseOrValue<string> | null,
      checksum?: PromiseOrValue<BytesLike> | null,
      filename?: null,
      size?: null,
      metadata?: null
    ): FileCreatedEventFilter;
    FileCreated(
      indexedFilename?: PromiseOrValue<string> | null,
      checksum?: PromiseOrValue<BytesLike> | null,
      filename?: null,
      size?: null,
      metadata?: null
    ): FileCreatedEventFilter;

    "FileDeleted(string,bytes32,string)"(
      indexedFilename?: PromiseOrValue<string> | null,
      checksum?: PromiseOrValue<BytesLike> | null,
      filename?: null
    ): FileDeletedEventFilter;
    FileDeleted(
      indexedFilename?: PromiseOrValue<string> | null,
      checksum?: PromiseOrValue<BytesLike> | null,
      filename?: null
    ): FileDeletedEventFilter;

    "OwnershipTransferStarted(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contentStore(overrides?: CallOverrides): Promise<BigNumber>;

    "createFile(string,bytes32[])"(
      filename: PromiseOrValue<string>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createFile(string,bytes32[],bytes)"(
      filename: PromiseOrValue<string>,
      checksums: PromiseOrValue<BytesLike>[],
      extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteFile(
      filename: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fileExists(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    files(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChecksum(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFile(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contentStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "createFile(string,bytes32[])"(
      filename: PromiseOrValue<string>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createFile(string,bytes32[],bytes)"(
      filename: PromiseOrValue<string>,
      checksums: PromiseOrValue<BytesLike>[],
      extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteFile(
      filename: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fileExists(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    files(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChecksum(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFile(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
