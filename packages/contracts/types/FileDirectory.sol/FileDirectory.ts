/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type FileStruct = {
  size: PromiseOrValue<BigNumberish>;
  contentType: PromiseOrValue<string>;
  contentEncoding: PromiseOrValue<string>;
  checksums: PromiseOrValue<BytesLike>[];
};

export type FileStructOutput = [BigNumber, string, string, string[]] & {
  size: BigNumber;
  contentType: string;
  contentEncoding: string;
  checksums: string[];
};

export interface FileDirectoryInterface extends utils.Interface {
  functions: {
    "_checksums(uint256)": FunctionFragment;
    "_chunks(bytes32)": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "checksumExists(bytes32)": FunctionFragment;
    "chunkSize(bytes32)": FunctionFragment;
    "createFile(string,string,string,bytes[])": FunctionFragment;
    "createFile(string,string,string,bytes32[])": FunctionFragment;
    "deleteFile(string)": FunctionFragment;
    "fileExists(string)": FunctionFragment;
    "filenames(uint256)": FunctionFragment;
    "files(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "readBytes(uint256,bytes32[])": FunctionFragment;
    "readChunk(bytes32)": FunctionFragment;
    "readChunks(bytes32[])": FunctionFragment;
    "readFile(bytes32)": FunctionFragment;
    "readFile(string)": FunctionFragment;
    "readFileData((uint256,string,string,bytes32[]))": FunctionFragment;
    "readFileData(bytes32)": FunctionFragment;
    "readNamedFileData(string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "writeChunk(bytes)": FunctionFragment;
    "writeChunks(bytes[])": FunctionFragment;
    "writeFile(string,string,bytes32[])": FunctionFragment;
    "writeFile(string,string,bytes[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_checksums"
      | "_chunks"
      | "acceptOwnership"
      | "checksumExists"
      | "chunkSize"
      | "createFile(string,string,string,bytes[])"
      | "createFile(string,string,string,bytes32[])"
      | "deleteFile"
      | "fileExists"
      | "filenames"
      | "files"
      | "owner"
      | "pendingOwner"
      | "readBytes"
      | "readChunk"
      | "readChunks"
      | "readFile(bytes32)"
      | "readFile(string)"
      | "readFileData((uint256,string,string,bytes32[]))"
      | "readFileData(bytes32)"
      | "readNamedFileData"
      | "renounceOwnership"
      | "transferOwnership"
      | "writeChunk"
      | "writeChunks"
      | "writeFile(string,string,bytes32[])"
      | "writeFile(string,string,bytes[])"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_checksums",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_chunks",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checksumExists",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "chunkSize",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createFile(string,string,string,bytes[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createFile(string,string,string,bytes32[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteFile",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "fileExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "filenames",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "files",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "readBytes",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "readChunk",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "readChunks",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "readFile(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "readFile(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "readFileData((uint256,string,string,bytes32[]))",
    values: [FileStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "readFileData(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "readNamedFileData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "writeChunk",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "writeChunks",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "writeFile(string,string,bytes32[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "writeFile(string,string,bytes[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "_checksums", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_chunks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checksumExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chunkSize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createFile(string,string,string,bytes[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFile(string,string,string,bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deleteFile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fileExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "filenames", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "files", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "readBytes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readChunk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readChunks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readFile(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readFile(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readFileData((uint256,string,string,bytes32[]))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readFileData(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readNamedFileData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "writeChunk", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "writeChunks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writeFile(string,string,bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writeFile(string,string,bytes[])",
    data: BytesLike
  ): Result;

  events: {
    "FileCreated(string,bytes32,uint256,string,string)": EventFragment;
    "FileDeleted(string)": EventFragment;
    "NewChunk(bytes32,uint256)": EventFragment;
    "NewFile(bytes32,uint256,string,string)": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FileCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FileDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewChunk"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFile"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface FileCreatedEventObject {
  filename: string;
  checksum: string;
  size: BigNumber;
  contentType: string;
  contentEncoding: string;
}
export type FileCreatedEvent = TypedEvent<
  [string, string, BigNumber, string, string],
  FileCreatedEventObject
>;

export type FileCreatedEventFilter = TypedEventFilter<FileCreatedEvent>;

export interface FileDeletedEventObject {
  filename: string;
}
export type FileDeletedEvent = TypedEvent<[string], FileDeletedEventObject>;

export type FileDeletedEventFilter = TypedEventFilter<FileDeletedEvent>;

export interface NewChunkEventObject {
  checksum: string;
  size: BigNumber;
}
export type NewChunkEvent = TypedEvent<
  [string, BigNumber],
  NewChunkEventObject
>;

export type NewChunkEventFilter = TypedEventFilter<NewChunkEvent>;

export interface NewFileEventObject {
  checksum: string;
  size: BigNumber;
  contentType: string;
  contentEncoding: string;
}
export type NewFileEvent = TypedEvent<
  [string, BigNumber, string, string],
  NewFileEventObject
>;

export type NewFileEventFilter = TypedEventFilter<NewFileEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface FileDirectory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FileDirectoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _checksums(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _chunks(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checksumExists(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    chunkSize(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { size: BigNumber }>;

    "createFile(string,string,string,bytes[])"(
      filename: PromiseOrValue<string>,
      contentType: PromiseOrValue<string>,
      contentEncoding: PromiseOrValue<string>,
      chunks: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createFile(string,string,string,bytes32[])"(
      filename: PromiseOrValue<string>,
      contentType: PromiseOrValue<string>,
      contentEncoding: PromiseOrValue<string>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteFile(
      filename: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fileExists(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    filenames(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    files(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    readBytes(
      size: PromiseOrValue<BigNumberish>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    readChunk(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { chunk: string }>;

    readChunks(
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { chunks: string[] }>;

    "readFile(bytes32)"(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[FileStructOutput] & { file: FileStructOutput }>;

    "readFile(string)"(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[FileStructOutput] & { file: FileStructOutput }>;

    "readFileData((uint256,string,string,bytes32[]))"(
      file: FileStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    "readFileData(bytes32)"(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    readNamedFileData(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    writeChunk(
      chunk: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    writeChunks(
      chunks: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "writeFile(string,string,bytes32[])"(
      contentType: PromiseOrValue<string>,
      contentEncoding: PromiseOrValue<string>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "writeFile(string,string,bytes[])"(
      contentType: PromiseOrValue<string>,
      contentEncoding: PromiseOrValue<string>,
      chunks: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _checksums(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  _chunks(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checksumExists(
    checksum: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  chunkSize(
    checksum: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "createFile(string,string,string,bytes[])"(
    filename: PromiseOrValue<string>,
    contentType: PromiseOrValue<string>,
    contentEncoding: PromiseOrValue<string>,
    chunks: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createFile(string,string,string,bytes32[])"(
    filename: PromiseOrValue<string>,
    contentType: PromiseOrValue<string>,
    contentEncoding: PromiseOrValue<string>,
    checksums: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteFile(
    filename: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fileExists(
    filename: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  filenames(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  files(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  readBytes(
    size: PromiseOrValue<BigNumberish>,
    checksums: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<string>;

  readChunk(
    checksum: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  readChunks(
    checksums: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  "readFile(bytes32)"(
    checksum: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<FileStructOutput>;

  "readFile(string)"(
    filename: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<FileStructOutput>;

  "readFileData((uint256,string,string,bytes32[]))"(
    file: FileStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  "readFileData(bytes32)"(
    checksum: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  readNamedFileData(
    filename: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  writeChunk(
    chunk: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  writeChunks(
    chunks: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "writeFile(string,string,bytes32[])"(
    contentType: PromiseOrValue<string>,
    contentEncoding: PromiseOrValue<string>,
    checksums: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "writeFile(string,string,bytes[])"(
    contentType: PromiseOrValue<string>,
    contentEncoding: PromiseOrValue<string>,
    chunks: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _checksums(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    _chunks(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    checksumExists(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    chunkSize(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createFile(string,string,string,bytes[])"(
      filename: PromiseOrValue<string>,
      contentType: PromiseOrValue<string>,
      contentEncoding: PromiseOrValue<string>,
      chunks: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "createFile(string,string,string,bytes32[])"(
      filename: PromiseOrValue<string>,
      contentType: PromiseOrValue<string>,
      contentEncoding: PromiseOrValue<string>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    deleteFile(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    fileExists(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    filenames(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    files(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    readBytes(
      size: PromiseOrValue<BigNumberish>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string>;

    readChunk(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    readChunks(
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    "readFile(bytes32)"(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<FileStructOutput>;

    "readFile(string)"(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<FileStructOutput>;

    "readFileData((uint256,string,string,bytes32[]))"(
      file: FileStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    "readFileData(bytes32)"(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    readNamedFileData(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    writeChunk(
      chunk: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    writeChunks(
      chunks: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    "writeFile(string,string,bytes32[])"(
      contentType: PromiseOrValue<string>,
      contentEncoding: PromiseOrValue<string>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<
      [string, FileStructOutput] & { checksum: string; file: FileStructOutput }
    >;

    "writeFile(string,string,bytes[])"(
      contentType: PromiseOrValue<string>,
      contentEncoding: PromiseOrValue<string>,
      chunks: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<
      [string, FileStructOutput] & { checksum: string; file: FileStructOutput }
    >;
  };

  filters: {
    "FileCreated(string,bytes32,uint256,string,string)"(
      filename?: PromiseOrValue<string> | null,
      checksum?: PromiseOrValue<BytesLike> | null,
      size?: null,
      contentType?: null,
      contentEncoding?: null
    ): FileCreatedEventFilter;
    FileCreated(
      filename?: PromiseOrValue<string> | null,
      checksum?: PromiseOrValue<BytesLike> | null,
      size?: null,
      contentType?: null,
      contentEncoding?: null
    ): FileCreatedEventFilter;

    "FileDeleted(string)"(
      filename?: PromiseOrValue<string> | null
    ): FileDeletedEventFilter;
    FileDeleted(
      filename?: PromiseOrValue<string> | null
    ): FileDeletedEventFilter;

    "NewChunk(bytes32,uint256)"(
      checksum?: PromiseOrValue<BytesLike> | null,
      size?: null
    ): NewChunkEventFilter;
    NewChunk(
      checksum?: PromiseOrValue<BytesLike> | null,
      size?: null
    ): NewChunkEventFilter;

    "NewFile(bytes32,uint256,string,string)"(
      checksum?: PromiseOrValue<BytesLike> | null,
      size?: null,
      contentType?: null,
      contentEncoding?: null
    ): NewFileEventFilter;
    NewFile(
      checksum?: PromiseOrValue<BytesLike> | null,
      size?: null,
      contentType?: null,
      contentEncoding?: null
    ): NewFileEventFilter;

    "OwnershipTransferStarted(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    _checksums(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _chunks(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checksumExists(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chunkSize(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createFile(string,string,string,bytes[])"(
      filename: PromiseOrValue<string>,
      contentType: PromiseOrValue<string>,
      contentEncoding: PromiseOrValue<string>,
      chunks: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createFile(string,string,string,bytes32[])"(
      filename: PromiseOrValue<string>,
      contentType: PromiseOrValue<string>,
      contentEncoding: PromiseOrValue<string>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteFile(
      filename: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fileExists(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    filenames(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    files(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    readBytes(
      size: PromiseOrValue<BigNumberish>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readChunk(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readChunks(
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "readFile(bytes32)"(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "readFile(string)"(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "readFileData((uint256,string,string,bytes32[]))"(
      file: FileStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "readFileData(bytes32)"(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readNamedFileData(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    writeChunk(
      chunk: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    writeChunks(
      chunks: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "writeFile(string,string,bytes32[])"(
      contentType: PromiseOrValue<string>,
      contentEncoding: PromiseOrValue<string>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "writeFile(string,string,bytes[])"(
      contentType: PromiseOrValue<string>,
      contentEncoding: PromiseOrValue<string>,
      chunks: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _checksums(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _chunks(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checksumExists(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chunkSize(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "createFile(string,string,string,bytes[])"(
      filename: PromiseOrValue<string>,
      contentType: PromiseOrValue<string>,
      contentEncoding: PromiseOrValue<string>,
      chunks: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createFile(string,string,string,bytes32[])"(
      filename: PromiseOrValue<string>,
      contentType: PromiseOrValue<string>,
      contentEncoding: PromiseOrValue<string>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteFile(
      filename: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fileExists(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    filenames(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    files(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    readBytes(
      size: PromiseOrValue<BigNumberish>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readChunk(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readChunks(
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "readFile(bytes32)"(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "readFile(string)"(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "readFileData((uint256,string,string,bytes32[]))"(
      file: FileStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "readFileData(bytes32)"(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readNamedFileData(
      filename: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    writeChunk(
      chunk: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    writeChunks(
      chunks: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "writeFile(string,string,bytes32[])"(
      contentType: PromiseOrValue<string>,
      contentEncoding: PromiseOrValue<string>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "writeFile(string,string,bytes[])"(
      contentType: PromiseOrValue<string>,
      contentEncoding: PromiseOrValue<string>,
      chunks: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
