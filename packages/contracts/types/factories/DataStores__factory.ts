/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { DataStores, DataStoresInterface } from "../DataStores";

const _abi = [
  {
    inputs: [],
    name: "ChainNotSupported",
    type: "error",
  },
  {
    inputs: [],
    name: "contentStore",
    outputs: [
      {
        internalType: "contract IContentStore",
        name: "",
        type: "IContentStore",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fileStore",
    outputs: [
      {
        internalType: "contract IFileStore",
        name: "",
        type: "IFileStore",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x61011f61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806321ea07e1146100455780633a6e674c14610069575b600080fd5b61004d610071565b6040516001600160a01b03909116815260200160405180910390f35b61004d6100ce565b600046600181900361008557600091505090565b80617a69036100b557507fa76502998eff87fba27b2646ba22d1c2b2208f239b074dd0a9a7df688501c847919050565b60405163f21c9f0760e01b815260040160405180910390fd5b60004660018190036100e257600091505090565b80617a69036100b557507f72e1d468e3ab07cc77731310b6c8dd5256e97c3128b5ba2e2093c0d747b9a35c91905056fea164736f6c634300080d000a";

type DataStoresConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DataStoresConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DataStores__factory extends ContractFactory {
  constructor(...args: DataStoresConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DataStores> {
    return super.deploy(overrides || {}) as Promise<DataStores>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DataStores {
    return super.attach(address) as DataStores;
  }
  override connect(signer: Signer): DataStores__factory {
    return super.connect(signer) as DataStores__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DataStoresInterface {
    return new utils.Interface(_abi) as DataStoresInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DataStores {
    return new Contract(address, _abi, signerOrProvider) as DataStores;
  }
}
