/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { FileReader, FileReaderInterface } from "../FileReader";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
    ],
    name: "FileNotFound",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_size",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_end",
        type: "uint256",
      },
    ],
    name: "InvalidCodeAtRange",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
    ],
    name: "readFile",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "size",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "contentType",
            type: "string",
          },
          {
            internalType: "string",
            name: "contentEncoding",
            type: "string",
          },
          {
            internalType: "bytes32[]",
            name: "checksums",
            type: "bytes32[]",
          },
        ],
        internalType: "struct File",
        name: "file",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
    ],
    name: "readFileData",
    outputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "size",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "contentType",
            type: "string",
          },
          {
            internalType: "string",
            name: "contentEncoding",
            type: "string",
          },
          {
            internalType: "bytes32[]",
            name: "checksums",
            type: "bytes32[]",
          },
        ],
        internalType: "struct File",
        name: "file",
        type: "tuple",
      },
    ],
    name: "readFileData",
    outputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x610a3961003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80633a72a9c4146100505780634cfbb2de146100795780636ab4ef3014610099575b600080fd5b61006361005e366004610502565b6100ac565b6040516100709190610573565b60405180910390f35b61008c610087366004610502565b610208565b6040516100709190610603565b61008c6100a7366004610783565b61021c565b6100d76040518060800160405280600081526020016060815260200160608152602001606081525090565b600073__$79896583f45f015cbf360bbefcc2e48d69$__63c2722ecc6040518163ffffffff1660e01b8152600401602060405180830381865af4158015610122573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610146919061085a565b6001600160a01b0316634641dce6846040518263ffffffff1660e01b815260040161017391815260200190565b602060405180830381865afa158015610190573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b4919061085a565b90506001600160a01b0381166101e55760405163a4b13c7360e01b8152600481018490526024015b60405180910390fd5b6101ee81610376565b806020019051810190610201919061091f565b9392505050565b60606000610215836100ac565b9050610201815b60606102438260000151604080518281016060018252910181526000602090910190815290565b905060005b8260600151518110156103705761035e8261035973__$79896583f45f015cbf360bbefcc2e48d69$__63c2722ecc6040518163ffffffff1660e01b8152600401602060405180830381865af41580156102a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c9919061085a565b6001600160a01b0316634641dce6876060015186815181106102ed576102ed6109cf565b60200260200101516040518263ffffffff1660e01b815260040161031391815260200190565b602060405180830381865afa158015610330573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610354919061085a565b610376565b61038c565b80610368816109fb565b915050610248565b50919050565b6060610386826001600019610417565b92915050565b601f1982015182518251603f199092019182906103a99083610a14565b11156104075760405162461bcd60e51b815260206004820152602760248201527f44796e616d69634275666665723a20417070656e64696e67206f7574206f66206044820152663137bab732399760c91b60648201526084016101dc565b61041184846104cc565b50505050565b6060833b600081900361043a575050604080516020810190915260008152610201565b80841115610458575050604080516020810190915260008152610201565b8383101561048a5760405163162544fd60e11b81526004810182905260248101859052604481018490526064016101dc565b838303848203600082821061049f57826104a1565b815b60408051603f8301601f19168101909152818152955090508087602087018a3c505050509392505050565b8051602082019150808201602084510184015b818410156104f75783518152602093840193016104df565b505082510190915250565b60006020828403121561051457600080fd5b5035919050565b60005b8381101561053657818101518382015260200161051e565b838111156104115750506000910152565b6000815180845261055f81602086016020860161051b565b601f01601f19169290920160200192915050565b60006020808352835181840152808401516080604085015261059860a0850182610547565b90506040850151601f19808684030160608701526105b68383610547565b6060880151878203909201608088015281518082529185019350600092508401905b808310156105f857835182529284019260019290920191908401906105d8565b509695505050505050565b6020815260006102016020830184610547565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561064f5761064f610616565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561067e5761067e610616565b604052919050565b600067ffffffffffffffff8211156106a0576106a0610616565b50601f01601f191660200190565b600082601f8301126106bf57600080fd5b81356106d26106cd82610686565b610655565b8181528460208386010111156106e757600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff82111561071e5761071e610616565b5060051b60200190565b600082601f83011261073957600080fd5b813560206107496106cd83610704565b82815260059290921b8401810191818101908684111561076857600080fd5b8286015b848110156105f8578035835291830191830161076c565b60006020828403121561079557600080fd5b813567ffffffffffffffff808211156107ad57600080fd5b90830190608082860312156107c157600080fd5b6107c961062c565b823581526020830135828111156107df57600080fd5b6107eb878286016106ae565b60208301525060408301358281111561080357600080fd5b61080f878286016106ae565b60408301525060608301358281111561082757600080fd5b61083387828601610728565b60608301525095945050505050565b6001600160a01b038116811461085757600080fd5b50565b60006020828403121561086c57600080fd5b815161020181610842565b600082601f83011261088857600080fd5b81516108966106cd82610686565b8181528460208386010111156108ab57600080fd5b6108bc82602083016020870161051b565b949350505050565b600082601f8301126108d557600080fd5b815160206108e56106cd83610704565b82815260059290921b8401810191818101908684111561090457600080fd5b8286015b848110156105f85780518352918301918301610908565b60006020828403121561093157600080fd5b815167ffffffffffffffff8082111561094957600080fd5b908301906080828603121561095d57600080fd5b61096561062c565b8251815260208301518281111561097b57600080fd5b61098787828601610877565b60208301525060408301518281111561099f57600080fd5b6109ab87828601610877565b6040830152506060830151828111156109c357600080fd5b610833878286016108c4565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610a0d57610a0d6109e5565b5060010190565b60008219821115610a2757610a276109e5565b50019056fea164736f6c634300080d000a";

type FileReaderConstructorParams =
  | [linkLibraryAddresses: FileReaderLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FileReaderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class FileReader__factory extends ContractFactory {
  constructor(...args: FileReaderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        FileReader__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: FileReaderLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$79896583f45f015cbf360bbefcc2e48d69\\$__", "g"),
      linkLibraryAddresses[
        "packages/contracts/src/approach2/ContentStoreRegistry.sol:ContentStoreRegistry"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FileReader> {
    return super.deploy(overrides || {}) as Promise<FileReader>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FileReader {
    return super.attach(address) as FileReader;
  }
  override connect(signer: Signer): FileReader__factory {
    return super.connect(signer) as FileReader__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FileReaderInterface {
    return new utils.Interface(_abi) as FileReaderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FileReader {
    return new Contract(address, _abi, signerOrProvider) as FileReader;
  }
}

export interface FileReaderLibraryAddresses {
  ["packages/contracts/src/approach2/ContentStoreRegistry.sol:ContentStoreRegistry"]: string;
}
