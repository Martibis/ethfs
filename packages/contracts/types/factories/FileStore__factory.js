"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileStore__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "ChecksumNotFound",
        type: "error",
    },
    {
        inputs: [],
        name: "ChunkTooBig",
        type: "error",
    },
    {
        inputs: [],
        name: "EmptyFile",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "_size",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "_start",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "_end",
                type: "uint256",
            },
        ],
        name: "InvalidCodeAtRange",
        type: "error",
    },
    {
        inputs: [],
        name: "WriteError",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "checksum",
                type: "bytes32",
            },
        ],
        name: "checksumExists",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        name: "checksums",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "checksum",
                type: "bytes32",
            },
        ],
        name: "chunkSize",
        outputs: [
            {
                internalType: "uint256",
                name: "size",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        name: "chunks",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "checksum",
                type: "bytes32",
            },
        ],
        name: "readChunk",
        outputs: [
            {
                internalType: "bytes",
                name: "chunk",
                type: "bytes",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "checksum",
                type: "bytes32",
            },
        ],
        name: "readFile",
        outputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "size",
                        type: "uint256",
                    },
                    {
                        internalType: "string",
                        name: "contentType",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "contentEncoding",
                        type: "string",
                    },
                    {
                        internalType: "bytes32[]",
                        name: "checksums",
                        type: "bytes32[]",
                    },
                ],
                internalType: "struct File",
                name: "file",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "size",
                        type: "uint256",
                    },
                    {
                        internalType: "string",
                        name: "contentType",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "contentEncoding",
                        type: "string",
                    },
                    {
                        internalType: "bytes32[]",
                        name: "checksums",
                        type: "bytes32[]",
                    },
                ],
                internalType: "struct File",
                name: "file",
                type: "tuple",
            },
        ],
        name: "readFileData",
        outputs: [
            {
                internalType: "bytes",
                name: "data",
                type: "bytes",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "checksum",
                type: "bytes32",
            },
        ],
        name: "readFileData",
        outputs: [
            {
                internalType: "bytes",
                name: "data",
                type: "bytes",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "chunk",
                type: "bytes",
            },
        ],
        name: "writeChunk",
        outputs: [
            {
                internalType: "bytes32",
                name: "checksum",
                type: "bytes32",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "size",
                        type: "uint256",
                    },
                    {
                        internalType: "string",
                        name: "contentType",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "contentEncoding",
                        type: "string",
                    },
                    {
                        internalType: "bytes32[]",
                        name: "checksums",
                        type: "bytes32[]",
                    },
                ],
                internalType: "struct File",
                name: "file",
                type: "tuple",
            },
        ],
        name: "writeFile",
        outputs: [
            {
                internalType: "bytes32",
                name: "checksum",
                type: "bytes32",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b50610d1d806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063957c28d711610066578063957c28d714610133578063a698b13014610146578063cff77f9214610187578063e8eae3cf1461019a578063f97406f7146101ad57600080fd5b80631a49cfca146100a35780631c2414d4146100cc5780633a72a9c4146100df5780634cfbb2de146100ff5780636fba0bf514610112575b600080fd5b6100b66100b1366004610848565b6101e8565b6040516100c391906109b9565b60405180910390f35b6100b66100da3660046109cc565b61030b565b6100f26100ed3660046109cc565b61036a565b6040516100c391906109e5565b6100b661010d3660046109cc565b6103e6565b610125610120366004610a75565b6103f4565b6040519081526020016100c3565b6101256101413660046109cc565b6104ae565b61016f6101543660046109cc565b6000602081905290815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016100c3565b610125610195366004610848565b610508565b6101256101a83660046109cc565b6105b3565b6101d86101bb3660046109cc565b6000908152602081905260409020546001600160a01b0316151590565b60405190151581526020016100c3565b80516060908067ffffffffffffffff8111156102065761020661072e565b6040519080825280601f01601f191660200182016040528015610230576020820181803683370190505b5091506000805b84606001515181101561030357600061026c8660600151838151811061025f5761025f610ac6565b602002602001015161030b565b805190915060005b818110156102e15782818151811061028e5761028e610ac6565b01602001516001600160f81b031916876102a88388610af2565b815181106102b8576102b8610ac6565b60200101906001600160f81b031916908160001a905350806102d981610b0a565b915050610274565b506102ec8185610af2565b9350505080806102fb90610b0a565b915050610237565b505050919050565b6000818152602081905260409020546060906001600160a01b031661034357604051639ff5a3e760e01b815260040160405180910390fd5b600082815260208190526040902054610364906001600160a01b03166105d4565b92915050565b6103956040518060800160405280600081526020016060815260200160608152602001606081525090565b6000828152602081905260409020546001600160a01b03166103ca57604051639ff5a3e760e01b815260040160405180910390fd5b6103d38261030b565b8060200190518101906103649190610bc3565b60606103646100b18361036a565b6000615fff8251111561041a576040516388c92e2760e01b815260040160405180910390fd5b5080516020808301919091206000818152918290526040909120546001600160a01b03166104a95761044b826105e4565b600082815260208190526040812080546001600160a01b0319166001600160a01b03939093169290921790915560018054808201825591527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018190555b919050565b6000818152602081905260408120546001600160a01b03166104e357604051639ff5a3e760e01b815260040160405180910390fd5b600082815260208190526040902054610364906001906001600160a01b03163b610c82565b600080805b83606001515181101561055e576105408460600151828151811061053357610533610ac6565b60200260200101516104ae565b61054a9083610af2565b91508061055681610b0a565b91505061050d565b50806000036105805760405163067b6a0f60e01b815260040160405180910390fd5b8083526040516105ac906105989085906020016109e5565b6040516020818303038152906040526103f4565b9392505050565b600181815481106105c357600080fd5b600091825260209091200154905081565b6060610364826001600019610649565b60008061060f836040516020016105fb9190610c99565b604051602081830303815290604052610702565b90508051602082016000f091506001600160a01b0382166106435760405163046a55db60e11b815260040160405180910390fd5b50919050565b6060833b600081900361066c5750506040805160208101909152600081526105ac565b8084111561068a5750506040805160208101909152600081526105ac565b838310156106c05760405163162544fd60e11b815260048101829052602481018590526044810184905260640160405180910390fd5b83830384820360008282106106d557826106d7565b815b60408051603f8301601f19168101909152818152955090508087602087018a3c505050509392505050565b6060815182604051602001610718929190610cbf565b6040516020818303038152906040529050919050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156107675761076761072e565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156107965761079661072e565b604052919050565b600067ffffffffffffffff8211156107b8576107b861072e565b50601f01601f191660200190565b60006107d96107d48461079e565b61076d565b90508281528383830111156107ed57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261081557600080fd5b6105ac838335602085016107c6565b600067ffffffffffffffff82111561083e5761083e61072e565b5060051b60200190565b6000602080838503121561085b57600080fd5b823567ffffffffffffffff8082111561087357600080fd5b908401906080828703121561088757600080fd5b61088f610744565b8235815283830135828111156108a457600080fd5b6108b088828601610804565b85830152506040830135828111156108c757600080fd5b6108d388828601610804565b6040830152506060830135828111156108eb57600080fd5b80840193505086601f84011261090057600080fd5b823591506109106107d483610824565b82815260059290921b8301840191848101908884111561092f57600080fd5b938501935b8385101561094d57843582529385019390850190610934565b6060830152509695505050505050565b60005b83811015610978578181015183820152602001610960565b83811115610987576000848401525b50505050565b600081518084526109a581602086016020860161095d565b601f01601f19169290920160200192915050565b6020815260006105ac602083018461098d565b6000602082840312156109de57600080fd5b5035919050565b600060208083528351818401528084015160806040850152610a0a60a085018261098d565b90506040850151601f1980868403016060870152610a28838361098d565b6060880151878203909201608088015281518082529185019350600092508401905b80831015610a6a5783518252928401926001929092019190840190610a4a565b509695505050505050565b600060208284031215610a8757600080fd5b813567ffffffffffffffff811115610a9e57600080fd5b8201601f81018413610aaf57600080fd5b610abe848235602084016107c6565b949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115610b0557610b05610adc565b500190565b600060018201610b1c57610b1c610adc565b5060010190565b600082601f830112610b3457600080fd5b8151610b426107d48261079e565b818152846020838601011115610b5757600080fd5b610abe82602083016020870161095d565b600082601f830112610b7957600080fd5b81516020610b896107d483610824565b82815260059290921b84018101918181019086841115610ba857600080fd5b8286015b84811015610a6a5780518352918301918301610bac565b600060208284031215610bd557600080fd5b815167ffffffffffffffff80821115610bed57600080fd5b9083019060808286031215610c0157600080fd5b610c09610744565b82518152602083015182811115610c1f57600080fd5b610c2b87828601610b23565b602083015250604083015182811115610c4357600080fd5b610c4f87828601610b23565b604083015250606083015182811115610c6757600080fd5b610c7387828601610b68565b60608301525095945050505050565b600082821015610c9457610c94610adc565b500390565b6000815260008251610cb281600185016020870161095d565b9190910160010192915050565b606360f81b815260e083901b6001600160e01b03191660018201526880600e6000396000f360b81b60058201528151600090610d0281600e85016020870161095d565b91909101600e01939250505056fea164736f6c634300080d000a";
const isSuperArgs = (xs) => xs.length > 1;
class FileStore__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.FileStore__factory = FileStore__factory;
FileStore__factory.bytecode = _bytecode;
FileStore__factory.abi = _abi;
