/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ChunkStore,
  ChunkStoreInterface,
} from "../../ChunkStore.sol/ChunkStore";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
    ],
    name: "ChunkExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
    ],
    name: "ChunkNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "ChunkTooBig",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_size",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_end",
        type: "uint256",
      },
    ],
    name: "InvalidCodeAtRange",
    type: "error",
  },
  {
    inputs: [],
    name: "WriteError",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "size",
        type: "uint256",
      },
    ],
    name: "NewChunk",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "_checksums",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "_chunks",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
    ],
    name: "checksumExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
    ],
    name: "chunkSize",
    outputs: [
      {
        internalType: "uint256",
        name: "size",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "size",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "checksums",
        type: "bytes32[]",
      },
    ],
    name: "readBytes",
    outputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
    ],
    name: "readChunk",
    outputs: [
      {
        internalType: "bytes",
        name: "chunk",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "checksums",
        type: "bytes32[]",
      },
    ],
    name: "readChunks",
    outputs: [
      {
        internalType: "bytes[]",
        name: "chunks",
        type: "bytes[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "chunk",
        type: "bytes",
      },
    ],
    name: "writeChunk",
    outputs: [
      {
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "chunks",
        type: "bytes[]",
      },
    ],
    name: "writeChunks",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "fileChecksums",
        type: "bytes32[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610c72806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063957c28d711610066578063957c28d714610132578063a1eb26f314610145578063bea751f414610158578063cb47080314610178578063f97406f71461019857600080fd5b806305c1deda146100985780631c2414d4146100de5780636fba0bf5146100fe578063746da1e71461011f575b600080fd5b6100c16100a63660046107a0565b6000602081905290815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f16100ec3660046107a0565b6101d3565b6040516100d59190610811565b61011161010c3660046108db565b61023a565b6040519081526020016100d5565b6100f161012d3660046109a7565b610347565b6101116101403660046107a0565b6103c2565b6101116101533660046107a0565b61041f565b61016b6101663660046109ee565b610440565b6040516100d59190610a9f565b61018b610186366004610ae3565b6104eb565b6040516100d59190610b18565b6101c36101a63660046107a0565b6000908152602081905260409020546001600160a01b0316151590565b60405190151581526020016100d5565b6000818152602081905260409020546060906001600160a01b0316610213576040516316fcd95f60e11b8152600481018390526024015b60405180910390fd5b600082815260208190526040902054610234906001600160a01b031661058e565b92915050565b6000615fff82511115610260576040516388c92e2760e01b815260040160405180910390fd5b5080516020808301919091206000818152918290526040909120546001600160a01b0316156102a557604051634fd1e20760e01b81526004810182905260240161020a565b6102ae8261059e565b60008281526020818152604080832080546001600160a01b0319166001600160a01b03959095169490941790935560018054808201825592527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69091018390558351915191825282917f277eb4123d86c9731f85aaee94623cc5ac9b8e1f593faa1e2bc1a3aa2d27d772910160405180910390a2919050565b606061036a83604080518281016060018252910181526000602090910190815290565b905060005b82518110156103bb57600061039c84838151811061038f5761038f610b7a565b60200260200101516101d3565b90506103a883826105fd565b50806103b381610ba6565b91505061036f565b5092915050565b6000818152602081905260408120546001600160a01b03166103fa576040516316fcd95f60e11b81526004810183905260240161020a565b600082815260208190526040902054610234906001906001600160a01b03163b610bbf565b6001818154811061042f57600080fd5b600091825260209091200154905081565b6060815167ffffffffffffffff81111561045c5761045c610824565b604051908082528060200260200182016040528015610485578160200160208202803683370190505b50905060005b82518110156104e5576104b68382815181106104a9576104a9610b7a565b602002602001015161023a565b8282815181106104c8576104c8610b7a565b6020908102919091010152806104dd81610ba6565b91505061048b565b50919050565b6060815167ffffffffffffffff81111561050757610507610824565b60405190808252806020026020018201604052801561053a57816020015b60608152602001906001900390816105255790505b50905060005b82518110156104e55761055e83828151811061038f5761038f610b7a565b82828151811061057057610570610b7a565b6020026020010181905250808061058690610ba6565b915050610540565b6060610234826001600019610688565b6000806105c9836040516020016105b59190610bd6565b60405160208183030381529060405261073e565b90508051602082016000f091506001600160a01b0382166104e55760405163046a55db60e11b815260040160405180910390fd5b601f1982015182518251603f1990920191829061061a9083610bfc565b11156106785760405162461bcd60e51b815260206004820152602760248201527f44796e616d69634275666665723a20417070656e64696e67206f7574206f66206044820152663137bab732399760c91b606482015260840161020a565b610682848461076a565b50505050565b6060833b60008190036106ab575050604080516020810190915260008152610737565b808411156106c9575050604080516020810190915260008152610737565b838310156106fb5760405163162544fd60e11b815260048101829052602481018590526044810184905260640161020a565b83830384820360008282106107105782610712565b815b60408051603f8301601f19168101909152818152955090508087602087018a3c505050505b9392505050565b6060815182604051602001610754929190610c14565b6040516020818303038152906040529050919050565b8051602082019150808201602084510184015b8184101561079557835181526020938401930161077d565b505082510190915250565b6000602082840312156107b257600080fd5b5035919050565b60005b838110156107d45781810151838201526020016107bc565b838111156106825750506000910152565b600081518084526107fd8160208601602086016107b9565b601f01601f19169290920160200192915050565b60208152600061073760208301846107e5565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561086357610863610824565b604052919050565b600082601f83011261087c57600080fd5b813567ffffffffffffffff81111561089657610896610824565b6108a9601f8201601f191660200161083a565b8181528460208386010111156108be57600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156108ed57600080fd5b813567ffffffffffffffff81111561090457600080fd5b6109108482850161086b565b949350505050565b600067ffffffffffffffff82111561093257610932610824565b5060051b60200190565b600082601f83011261094d57600080fd5b8135602061096261095d83610918565b61083a565b82815260059290921b8401810191818101908684111561098157600080fd5b8286015b8481101561099c5780358352918301918301610985565b509695505050505050565b600080604083850312156109ba57600080fd5b82359150602083013567ffffffffffffffff8111156109d857600080fd5b6109e48582860161093c565b9150509250929050565b60006020808385031215610a0157600080fd5b823567ffffffffffffffff80821115610a1957600080fd5b818501915085601f830112610a2d57600080fd5b8135610a3b61095d82610918565b81815260059190911b83018401908481019088831115610a5a57600080fd5b8585015b83811015610a9257803585811115610a765760008081fd5b610a848b89838a010161086b565b845250918601918601610a5e565b5098975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015610ad757835183529284019291840191600101610abb565b50909695505050505050565b600060208284031215610af557600080fd5b813567ffffffffffffffff811115610b0c57600080fd5b6109108482850161093c565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610b6d57603f19888603018452610b5b8583516107e5565b94509285019290850190600101610b3f565b5092979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610bb857610bb8610b90565b5060010190565b600082821015610bd157610bd1610b90565b500390565b6000815260008251610bef8160018501602087016107b9565b9190910160010192915050565b60008219821115610c0f57610c0f610b90565b500190565b606360f81b815260e083901b6001600160e01b03191660018201526880600e6000396000f360b81b60058201528151600090610c5781600e8501602087016107b9565b91909101600e01939250505056fea164736f6c634300080d000a";

type ChunkStoreConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ChunkStoreConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ChunkStore__factory extends ContractFactory {
  constructor(...args: ChunkStoreConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ChunkStore> {
    return super.deploy(overrides || {}) as Promise<ChunkStore>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ChunkStore {
    return super.attach(address) as ChunkStore;
  }
  override connect(signer: Signer): ChunkStore__factory {
    return super.connect(signer) as ChunkStore__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ChunkStoreInterface {
    return new utils.Interface(_abi) as ChunkStoreInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ChunkStore {
    return new Contract(address, _abi, signerOrProvider) as ChunkStore;
  }
}
