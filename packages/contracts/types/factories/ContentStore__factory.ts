/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { ContentStore, ContentStoreInterface } from "../ContentStore";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
    ],
    name: "ChecksumExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
    ],
    name: "ChecksumNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "ContentTooBig",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "contentSize",
        type: "uint256",
      },
    ],
    name: "NewChecksum",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "_checksums",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "_pointers",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "content",
        type: "bytes",
      },
    ],
    name: "addContent",
    outputs: [
      {
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "pointer",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pointer",
        type: "address",
      },
    ],
    name: "addPointer",
    outputs: [
      {
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
    ],
    name: "checksumExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
    ],
    name: "contentLength",
    outputs: [
      {
        internalType: "uint256",
        name: "size",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
    ],
    name: "getPointer",
    outputs: [
      {
        internalType: "address",
        name: "pointer",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506105ed806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80633a77c6c91161005b5780633a77c6c9146101195780634641dce61461012c578063a1eb26f31461013f578063f97406f71461015257600080fd5b806308fd83ae14610082578063093e9839146100c857806331654b09146100f8575b600080fd5b6100ab6100903660046104d0565b6000602081905290815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100db6100d63660046104ff565b61018d565b604080519283526001600160a01b039091166020830152016100bf565b61010b6101063660046104d0565b61029f565b6040519081526020016100bf565b61010b6101273660046105b0565b610304565b6100ab61013a3660046104d0565b6103d8565b61010b61014d3660046104d0565b61042c565b61017d6101603660046104d0565b6000908152602081905260409020546001600160a01b0316151590565b60405190151581526020016100bf565b600080615fff835111156101b457604051635ee68a6560e01b815260040160405180910390fd5b82516020808501919091206000818152918290526040909120549092506001600160a01b031615610200575060008181526020819052604090205490926001600160a01b039091169150565b6102098361044d565b60008381526020818152604080832080546001600160a01b0319166001600160a01b03861617905560018054808201825593527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69092018590558551915191825291925083917fa1011c3aaafa54b70d8ca12f3b9257ca9a4fe1f6a02196819ea1dcaee1932ca0910160405180910390a2915091565b6000818152602081905260408120546001600160a01b03166102dc576040516303001a1960e41b8152600481018390526024015b60405180910390fd5b6000828152602081905260409020546102fd906001600160a01b031661048f565b5192915050565b6000806103108361048f565b80516020808301919091206000818152918290526040909120549093509091506001600160a01b0316156103445750919050565b60008281526020818152604080832080546001600160a01b0319166001600160a01b03881617905560018054808201825593527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69092018490558251915191825283917fa1011c3aaafa54b70d8ca12f3b9257ca9a4fe1f6a02196819ea1dcaee1932ca0910160405180910390a250919050565b6000818152602081905260408120546001600160a01b0316610410576040516303001a1960e41b8152600481018390526024016102d3565b506000908152602081905260409020546001600160a01b031690565b6001818154811061043c57600080fd5b600091825260209091200154905081565b60008151600181018060401b6a61000080600a3d393df300178452600a8101601585016000f0925050816104895763301164256000526004601cfd5b90915290565b6060813b806104a6576311052bb46000526004601cfd5b600181039050604051915061ffe0603f820116820160405280825280600160208401853c50919050565b6000602082840312156104e257600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561051157600080fd5b813567ffffffffffffffff8082111561052957600080fd5b818401915084601f83011261053d57600080fd5b81358181111561054f5761054f6104e9565b604051601f8201601f19908116603f01168101908382118183101715610577576105776104e9565b8160405282815287602084870101111561059057600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000602082840312156105c257600080fd5b81356001600160a01b03811681146105d957600080fd5b939250505056fea164736f6c634300080d000a";

type ContentStoreConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ContentStoreConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ContentStore__factory extends ContractFactory {
  constructor(...args: ContentStoreConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContentStore> {
    return super.deploy(overrides || {}) as Promise<ContentStore>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ContentStore {
    return super.attach(address) as ContentStore;
  }
  override connect(signer: Signer): ContentStore__factory {
    return super.connect(signer) as ContentStore__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ContentStoreInterface {
    return new utils.Interface(_abi) as ContentStoreInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ContentStore {
    return new Contract(address, _abi, signerOrProvider) as ContentStore;
  }
}
