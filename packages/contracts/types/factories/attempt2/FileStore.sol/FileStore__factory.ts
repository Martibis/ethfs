/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  FileStore,
  FileStoreInterface,
} from "../../../attempt2/FileStore.sol/FileStore";

const _abi = [
  {
    inputs: [],
    name: "FileNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "FilenameExists",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "filename",
        type: "string",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "size",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "contentType",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "contentEncoding",
        type: "string",
      },
    ],
    name: "FileCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "filename",
        type: "string",
      },
    ],
    name: "FileDeleted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferStarted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "filename",
        type: "string",
      },
      {
        internalType: "string",
        name: "contentType",
        type: "string",
      },
      {
        internalType: "string",
        name: "contentEncoding",
        type: "string",
      },
      {
        internalType: "bytes32[]",
        name: "checksums",
        type: "bytes32[]",
      },
    ],
    name: "createFile",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "filename",
        type: "string",
      },
    ],
    name: "deleteFile",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "filename",
        type: "string",
      },
    ],
    name: "fileExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "filenames",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "files",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "filename",
        type: "string",
      },
    ],
    name: "readFile",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "size",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "contentType",
            type: "string",
          },
          {
            internalType: "string",
            name: "contentEncoding",
            type: "string",
          },
          {
            internalType: "bytes32[]",
            name: "checksums",
            type: "bytes32[]",
          },
        ],
        internalType: "struct File",
        name: "file",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "filename",
        type: "string",
      },
    ],
    name: "readFileData",
    outputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b610096565b600180546001600160a01b031916905561004381610046602090811b61060417901c565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610fb9806100a56000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063a991005411610071578063a99100541461015c578063d0643b111461016f578063d5b8e6c114610182578063e30c397814610195578063e7755761146101a6578063f2fde38b146101df57600080fd5b806360f9bb11146100b9578063715018a6146100e257806379ba5097146100ec5780638c2ae331146100f45780638da5cb5b146101145780639bccd6ad14610139575b600080fd5b6100cc6100c736600461097b565b6101f2565b6040516100d99190610a10565b60405180910390f35b6100ea6102de565b005b6100ea6102f2565b61010761010236600461097b565b610371565b6040516100d99190610aa0565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100d9565b61014c61014736600461097b565b6103fd565b60405190151581526020016100d9565b6100ea61016a36600461097b565b61042b565b61010761017d366004610ab3565b610494565b6100ea610190366004610af0565b610540565b6001546001600160a01b0316610121565b6101d16101b436600461097b565b805160208183018101805160028252928201919093012091525481565b6040519081526020016100d9565b6100ea6101ed366004610bf0565b610593565b61021d6040518060800160405280600081526020016060815260200160608152602001606081525090565b600060028360405161022f9190610c19565b9081526040519081900360200190205490508061025f57604051633b4835d960e21b815260040160405180910390fd5b604051630e9caa7160e21b81526004810182905273__$81f1da286928eecde32d52d5f2d871be62$__90633a72a9c490602401600060405180830381865af41580156102af573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102d79190810190610d99565b9392505050565b6102e6610654565b6102f060006106ae565b565b60015433906001600160a01b031681146103655760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084015b60405180910390fd5b61036e816106ae565b50565b6060600061037e836101f2565b6040516306ab4ef360e41b815290915073__$81f1da286928eecde32d52d5f2d871be62$__90636ab4ef30906103b8908490600401610e09565b600060405180830381865af41580156103d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102d79190810190610e74565b60008060001b6002836040516104139190610c19565b90815260200160405180910390205414159050919050565b610433610654565b6002816040516104439190610c19565b90815260405190819003602001812060009055610461908290610c19565b604051908190038120907f584fb2b00bcb43e608b5efabffaa6c6037e3f5fd1a3ec96ea172ada6056d617490600090a250565b600381815481106104a457600080fd5b9060005260206000200160009150905080546104bf90610ebd565b80601f01602080910402602001604051908101604052809291908181526020018280546104eb90610ebd565b80156105385780601f1061050d57610100808354040283529160200191610538565b820191906000526020600020905b81548152906001019060200180831161051b57829003601f168201915b505050505081565b6000801b6002856040516105549190610c19565b908152602001604051809103902054146105815760405163fc78a34d60e01b815260040160405180910390fd5b61058d848484846106c7565b50505050565b61059b610654565b600180546001600160a01b0383166001600160a01b031990911681179091556105cc6000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146102f05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161035c565b600180546001600160a01b031916905561036e81610604565b60008073__$f24ba1edace712c6adc99e909abe1b3b79$__63266c235a8686866040518463ffffffff1660e01b815260040161070593929190610ef7565b600060405180830381865af4158015610722573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261074a9190810190610f3a565b915091508160028760405161075f9190610c19565b90815260405160209181900382019020919091556003805460018101825560009190915287516107b6927fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9092019189019061081d565b5081866040516107c69190610c19565b60405180910390207f1de5c5350037eedb1d809474fa9bfa8934c9bbdc070008c3e1e78ea0304f32f583600001518460200151856040015160405161080d93929190610f81565b60405180910390a3505050505050565b82805461082990610ebd565b90600052602060002090601f01602090048101928261084b5760008555610891565b82601f1061086457805160ff1916838001178555610891565b82800160010185558215610891579182015b82811115610891578251825591602001919060010190610876565b5061089d9291506108a1565b5090565b5b8082111561089d57600081556001016108a2565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156108f5576108f56108b6565b604052919050565b600067ffffffffffffffff821115610917576109176108b6565b50601f01601f191660200190565b600082601f83011261093657600080fd5b8135610949610944826108fd565b6108cc565b81815284602083860101111561095e57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561098d57600080fd5b813567ffffffffffffffff8111156109a457600080fd5b6109b084828501610925565b949350505050565b60005b838110156109d35781810151838201526020016109bb565b8381111561058d5750506000910152565b600081518084526109fc8160208601602086016109b8565b601f01601f19169290920160200192915050565b600060208083528351818401528084015160806040850152610a3560a08501826109e4565b90506040850151601f1980868403016060870152610a5383836109e4565b6060880151878203909201608088015281518082529185019350600092508401905b80831015610a955783518252928401926001929092019190840190610a75565b509695505050505050565b6020815260006102d760208301846109e4565b600060208284031215610ac557600080fd5b5035919050565b600067ffffffffffffffff821115610ae657610ae66108b6565b5060051b60200190565b60008060008060808587031215610b0657600080fd5b843567ffffffffffffffff80821115610b1e57600080fd5b610b2a88838901610925565b9550602091508187013581811115610b4157600080fd5b610b4d89828a01610925565b955050604087013581811115610b6257600080fd5b610b6e89828a01610925565b945050606087013581811115610b8357600080fd5b87019050601f81018813610b9657600080fd5b8035610ba461094482610acc565b81815260059190911b8201830190838101908a831115610bc357600080fd5b928401925b82841015610be157833582529284019290840190610bc8565b979a9699509497505050505050565b600060208284031215610c0257600080fd5b81356001600160a01b03811681146102d757600080fd5b60008251610c2b8184602087016109b8565b9190910192915050565b6000610c43610944846108fd565b9050828152838383011115610c5757600080fd5b6102d78360208301846109b8565b600082601f830112610c7657600080fd5b6102d783835160208501610c35565b600082601f830112610c9657600080fd5b81516020610ca661094483610acc565b82815260059290921b84018101918181019086841115610cc557600080fd5b8286015b84811015610a955780518352918301918301610cc9565b600060808284031215610cf257600080fd5b6040516080810167ffffffffffffffff8282108183111715610d1657610d166108b6565b81604052829350845183526020850151915080821115610d3557600080fd5b610d4186838701610c65565b60208401526040850151915080821115610d5a57600080fd5b610d6686838701610c65565b60408401526060850151915080821115610d7f57600080fd5b50610d8c85828601610c85565b6060830152505092915050565b600060208284031215610dab57600080fd5b815167ffffffffffffffff811115610dc257600080fd5b6109b084828501610ce0565b600081518084526020808501945080840160005b83811015610dfe57815187529582019590820190600101610de2565b509495945050505050565b60208152815160208201526000602083015160806040840152610e2f60a08401826109e4565b90506040840151601f1980858403016060860152610e4d83836109e4565b9250606086015191508085840301608086015250610e6b8282610dce565b95945050505050565b600060208284031215610e8657600080fd5b815167ffffffffffffffff811115610e9d57600080fd5b8201601f81018413610eae57600080fd5b6109b084825160208401610c35565b600181811c90821680610ed157607f821691505b602082108103610ef157634e487b7160e01b600052602260045260246000fd5b50919050565b606081526000610f0a60608301866109e4565b8281036020840152610f1c81866109e4565b90508281036040840152610f308185610dce565b9695505050505050565b60008060408385031215610f4d57600080fd5b82519150602083015167ffffffffffffffff811115610f6b57600080fd5b610f7785828601610ce0565b9150509250929050565b838152606060208201526000610f9a60608301856109e4565b8281036040840152610f3081856109e456fea164736f6c634300080d000a";

type FileStoreConstructorParams =
  | [linkLibraryAddresses: FileStoreLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FileStoreConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class FileStore__factory extends ContractFactory {
  constructor(...args: FileStoreConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        FileStore__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(linkLibraryAddresses: FileStoreLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$81f1da286928eecde32d52d5f2d871be62\\$__", "g"),
      linkLibraryAddresses[
        "packages/contracts/src/attempt2/FileReader.sol:FileReader"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$f24ba1edace712c6adc99e909abe1b3b79\\$__", "g"),
      linkLibraryAddresses[
        "packages/contracts/src/attempt2/FileWriter.sol:FileWriter"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FileStore> {
    return super.deploy(overrides || {}) as Promise<FileStore>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FileStore {
    return super.attach(address) as FileStore;
  }
  override connect(signer: Signer): FileStore__factory {
    return super.connect(signer) as FileStore__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FileStoreInterface {
    return new utils.Interface(_abi) as FileStoreInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FileStore {
    return new Contract(address, _abi, signerOrProvider) as FileStore;
  }
}

export interface FileStoreLibraryAddresses {
  ["packages/contracts/src/attempt2/FileReader.sol:FileReader"]: string;
  ["packages/contracts/src/attempt2/FileWriter.sol:FileWriter"]: string;
}
