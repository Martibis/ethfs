/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  FileStore,
  FileStoreInterface,
} from "../../../approach2/FileStore.sol/FileStore";

const _abi = [
  {
    inputs: [],
    name: "FileNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "FilenameExists",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "filename",
        type: "string",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "size",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "metadata",
        type: "bytes",
      },
    ],
    name: "FileCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "filename",
        type: "string",
      },
    ],
    name: "FileDeleted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferStarted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "filename",
        type: "string",
      },
      {
        internalType: "bytes32[]",
        name: "checksums",
        type: "bytes32[]",
      },
      {
        internalType: "bytes",
        name: "metadata",
        type: "bytes",
      },
    ],
    name: "createFile",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "filename",
        type: "string",
      },
    ],
    name: "deleteFile",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "filename",
        type: "string",
      },
    ],
    name: "fileExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "filenames",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "files",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "filename",
        type: "string",
      },
    ],
    name: "getChecksum",
    outputs: [
      {
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "filename",
        type: "string",
      },
    ],
    name: "readFile",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "size",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "checksums",
            type: "bytes32[]",
          },
        ],
        internalType: "struct File",
        name: "file",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "filename",
        type: "string",
      },
    ],
    name: "readFileData",
    outputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b610096565b600180546001600160a01b031916905561004381610046602090811b61066117901c565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610ed2806100a56000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80639bccd6ad1161008c578063d0643b1111610066578063d0643b11146101be578063e30c3978146101d1578063e7755761146101e2578063f2fde38b1461020d57600080fd5b80639bccd6ad14610167578063a52e640e1461018a578063a9910054146101ab57600080fd5b806360f9bb11146100d4578063715018a6146100fd57806379ba5097146101075780638c2ae3311461010f5780638da5cb5b1461012f5780639720799214610154575b600080fd5b6100e76100e23660046109f1565b610220565b6040516100f49190610a2e565b60405180910390f35b6101056102f6565b005b61010561030a565b61012261011d3660046109f1565b610389565b6040516100f49190610ae2565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100f4565b610105610162366004610b19565b610415565b61017a6101753660046109f1565b610466565b60405190151581526020016100f4565b61019d6101983660046109f1565b610494565b6040519081526020016100f4565b6101056101b93660046109f1565b6104db565b6101226101cc366004610bf5565b610544565b6001546001600160a01b031661013c565b61019d6101f03660046109f1565b805160208183018101805160028252928201919093012091525481565b61010561021b366004610c0e565b6105f0565b60408051808201909152600081526060602082015260006002836040516102479190610c37565b9081526040519081900360200190205490508061027757604051633b4835d960e21b815260040160405180910390fd5b604051630e9caa7160e21b81526004810182905273__$1461fc95244bd93aa05561b473f57cc149$__90633a72a9c490602401600060405180830381865af41580156102c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102ef9190810190610cfa565b9392505050565b6102fe6106b1565b610308600061070b565b565b60015433906001600160a01b0316811461037d5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084015b60405180910390fd5b6103868161070b565b50565b6060600061039683610220565b6040516306ab4ef360e41b815290915073__$1461fc95244bd93aa05561b473f57cc149$__90636ab4ef30906103d0908490600401610d6a565b600060405180830381865af41580156103ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102ef9190810190610d8f565b6000801b6002846040516104299190610c37565b908152602001604051809103902054146104565760405163fc78a34d60e01b815260040160405180910390fd5b610461838383610724565b505050565b60008060001b60028360405161047c9190610c37565b90815260200160405180910390205414159050919050565b60006002826040516104a69190610c37565b908152604051908190036020019020549050806104d657604051633b4835d960e21b815260040160405180910390fd5b919050565b6104e36106b1565b6002816040516104f39190610c37565b90815260405190819003602001812060009055610511908290610c37565b604051908190038120907f584fb2b00bcb43e608b5efabffaa6c6037e3f5fd1a3ec96ea172ada6056d617490600090a250565b6003818154811061055457600080fd5b90600052602060002001600091509050805461056f90610e06565b80601f016020809104026020016040519081016040528092919081815260200182805461059b90610e06565b80156105e85780601f106105bd576101008083540402835291602001916105e8565b820191906000526020600020905b8154815290600101906020018083116105cb57829003601f168201915b505050505081565b6105f86106b1565b600180546001600160a01b0383166001600160a01b031990911681179091556106296000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146103085760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610374565b600180546001600160a01b031916905561038681610661565b60008073__$753a9f2206a3f3daa0935653cc04bf2189$__63e4a6591f85856040518363ffffffff1660e01b8152600401610760929190610e40565b600060405180830381865af415801561077d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107a59190810190610e65565b91509150816002866040516107ba9190610c37565b9081526040516020918190038201902091909155600380546001810182556000919091528651610811927fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9092019188019061086a565b5081856040516108219190610c37565b604051908190038120835190917f1775727f73eb9deb31b3acc059551958c7fc9ddac6f63fec63eb7b198ccf25799161085b918890610eac565b60405180910390a35050505050565b82805461087690610e06565b90600052602060002090601f01602090048101928261089857600085556108de565b82601f106108b157805160ff19168380011785556108de565b828001600101855582156108de579182015b828111156108de5782518255916020019190600101906108c3565b506108ea9291506108ee565b5090565b5b808211156108ea57600081556001016108ef565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561093c5761093c610903565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561096b5761096b610903565b604052919050565b600067ffffffffffffffff82111561098d5761098d610903565b50601f01601f191660200190565b600082601f8301126109ac57600080fd5b81356109bf6109ba82610973565b610942565b8181528460208386010111156109d457600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215610a0357600080fd5b813567ffffffffffffffff811115610a1a57600080fd5b610a268482850161099b565b949350505050565b60208082528251828201528281015160408084015280516060840181905260009291820190839060808601905b80831015610a7b5783518252928401926001929092019190840190610a5b565b509695505050505050565b60005b83811015610aa1578181015183820152602001610a89565b83811115610ab0576000848401525b50505050565b60008151808452610ace816020860160208601610a86565b601f01601f19169290920160200192915050565b6020815260006102ef6020830184610ab6565b600067ffffffffffffffff821115610b0f57610b0f610903565b5060051b60200190565b600080600060608486031215610b2e57600080fd5b833567ffffffffffffffff80821115610b4657600080fd5b610b528783880161099b565b9450602091508186013581811115610b6957600080fd5b8601601f81018813610b7a57600080fd5b8035610b886109ba82610af5565b81815260059190911b8201840190848101908a831115610ba757600080fd5b928501925b82841015610bc557833582529285019290850190610bac565b96505050506040860135915080821115610bde57600080fd5b50610beb8682870161099b565b9150509250925092565b600060208284031215610c0757600080fd5b5035919050565b600060208284031215610c2057600080fd5b81356001600160a01b03811681146102ef57600080fd5b60008251610c49818460208701610a86565b9190910192915050565b600060408284031215610c6557600080fd5b610c6d610919565b90508151815260208083015167ffffffffffffffff811115610c8e57600080fd5b8301601f81018513610c9f57600080fd5b8051610cad6109ba82610af5565b81815260059190911b82018301908381019087831115610ccc57600080fd5b928401925b82841015610cea57835182529284019290840190610cd1565b8085870152505050505092915050565b600060208284031215610d0c57600080fd5b815167ffffffffffffffff811115610d2357600080fd5b610a2684828501610c53565b600081518084526020808501945080840160005b83811015610d5f57815187529582019590820190600101610d43565b509495945050505050565b602081528151602082015260006020830151604080840152610a266060840182610d2f565b600060208284031215610da157600080fd5b815167ffffffffffffffff811115610db857600080fd5b8201601f81018413610dc957600080fd5b8051610dd76109ba82610973565b818152856020838501011115610dec57600080fd5b610dfd826020830160208601610a86565b95945050505050565b600181811c90821680610e1a57607f821691505b602082108103610e3a57634e487b7160e01b600052602260045260246000fd5b50919050565b604081526000610e536040830185610d2f565b8281036020840152610dfd8185610ab6565b60008060408385031215610e7857600080fd5b82519150602083015167ffffffffffffffff811115610e9657600080fd5b610ea285828601610c53565b9150509250929050565b828152604060208201526000610a266040830184610ab656fea164736f6c634300080d000a";

type FileStoreConstructorParams =
  | [linkLibraryAddresses: FileStoreLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FileStoreConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class FileStore__factory extends ContractFactory {
  constructor(...args: FileStoreConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        FileStore__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(linkLibraryAddresses: FileStoreLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$1461fc95244bd93aa05561b473f57cc149\\$__", "g"),
      linkLibraryAddresses[
        "packages/contracts/src/approach2/FileReader.sol:FileReader"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$753a9f2206a3f3daa0935653cc04bf2189\\$__", "g"),
      linkLibraryAddresses[
        "packages/contracts/src/approach2/FileWriter.sol:FileWriter"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FileStore> {
    return super.deploy(overrides || {}) as Promise<FileStore>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FileStore {
    return super.attach(address) as FileStore;
  }
  override connect(signer: Signer): FileStore__factory {
    return super.connect(signer) as FileStore__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FileStoreInterface {
    return new utils.Interface(_abi) as FileStoreInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FileStore {
    return new Contract(address, _abi, signerOrProvider) as FileStore;
  }
}

export interface FileStoreLibraryAddresses {
  ["packages/contracts/src/approach2/FileReader.sol:FileReader"]: string;
  ["packages/contracts/src/approach2/FileWriter.sol:FileWriter"]: string;
}
