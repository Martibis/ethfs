/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  FileStore,
  FileStoreInterface,
} from "../../FileStore.sol/FileStore";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
    ],
    name: "ChunkExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
    ],
    name: "ChunkNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "ChunkTooBig",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyFile",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_size",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_end",
        type: "uint256",
      },
    ],
    name: "InvalidCodeAtRange",
    type: "error",
  },
  {
    inputs: [],
    name: "WriteError",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "size",
        type: "uint256",
      },
    ],
    name: "NewChunk",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "size",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "contentType",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "contentEncoding",
        type: "string",
      },
    ],
    name: "NewFile",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
    ],
    name: "checksumExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "checksums",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
    ],
    name: "chunkSize",
    outputs: [
      {
        internalType: "uint256",
        name: "size",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "chunks",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
    ],
    name: "readChunk",
    outputs: [
      {
        internalType: "bytes",
        name: "chunk",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
    ],
    name: "readFile",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "size",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "contentType",
            type: "string",
          },
          {
            internalType: "string",
            name: "contentEncoding",
            type: "string",
          },
          {
            internalType: "bytes32[]",
            name: "checksums",
            type: "bytes32[]",
          },
        ],
        internalType: "struct File",
        name: "file",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "size",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "contentType",
            type: "string",
          },
          {
            internalType: "string",
            name: "contentEncoding",
            type: "string",
          },
          {
            internalType: "bytes32[]",
            name: "checksums",
            type: "bytes32[]",
          },
        ],
        internalType: "struct File",
        name: "file",
        type: "tuple",
      },
    ],
    name: "readFileData",
    outputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
    ],
    name: "readFileData",
    outputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "chunk",
        type: "bytes",
      },
    ],
    name: "writeChunk",
    outputs: [
      {
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "size",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "contentType",
            type: "string",
          },
          {
            internalType: "string",
            name: "contentEncoding",
            type: "string",
          },
          {
            internalType: "bytes32[]",
            name: "checksums",
            type: "bytes32[]",
          },
        ],
        internalType: "struct File",
        name: "file",
        type: "tuple",
      },
    ],
    name: "writeFile",
    outputs: [
      {
        internalType: "bytes32",
        name: "checksum",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610dbd806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063957c28d711610066578063957c28d714610133578063a698b13014610146578063cff77f9214610187578063e8eae3cf1461019a578063f97406f7146101ad57600080fd5b80631a49cfca146100a35780631c2414d4146100cc5780633a72a9c4146100df5780634cfbb2de146100ff5780636fba0bf514610112575b600080fd5b6100b66100b13660046108b3565b6101e8565b6040516100c39190610a24565b60405180910390f35b6100b66100da366004610a37565b61030b565b6100f26100ed366004610a37565b610372565b6040516100c39190610a50565b6100b661010d366004610a37565b6103b9565b610125610120366004610ae0565b6103c7565b6040519081526020016100c3565b610125610141366004610a37565b6104d4565b61016f610154366004610a37565b6000602081905290815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016100c3565b6101256101953660046108b3565b610531565b6101256101a8366004610a37565b610621565b6101d86101bb366004610a37565b6000908152602081905260409020546001600160a01b0316151590565b60405190151581526020016100c3565b80516060908067ffffffffffffffff81111561020657610206610799565b6040519080825280601f01601f191660200182016040528015610230576020820181803683370190505b5091506000805b84606001515181101561030357600061026c8660600151838151811061025f5761025f610b31565b602002602001015161030b565b805190915060005b818110156102e15782818151811061028e5761028e610b31565b01602001516001600160f81b031916876102a88388610b5d565b815181106102b8576102b8610b31565b60200101906001600160f81b031916908160001a905350806102d981610b75565b915050610274565b506102ec8185610b5d565b9350505080806102fb90610b75565b915050610237565b505050919050565b6000818152602081905260409020546060906001600160a01b031661034b576040516316fcd95f60e11b8152600481018390526024015b60405180910390fd5b60008281526020819052604090205461036c906001600160a01b0316610642565b92915050565b61039d6040518060800160405280600081526020016060815260200160608152602001606081525090565b6103a68261030b565b80602001905181019061036c9190610c2e565b606061036c6100b183610372565b6000615fff825111156103ed576040516388c92e2760e01b815260040160405180910390fd5b5080516020808301919091206000818152918290526040909120546001600160a01b03161561043257604051634fd1e20760e01b815260048101829052602401610342565b61043b82610652565b60008281526020818152604080832080546001600160a01b0319166001600160a01b03959095169490941790935560018054808201825592527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69091018390558351915191825282917f277eb4123d86c9731f85aaee94623cc5ac9b8e1f593faa1e2bc1a3aa2d27d772910160405180910390a2919050565b6000818152602081905260408120546001600160a01b031661050c576040516316fcd95f60e11b815260048101839052602401610342565b60008281526020819052604090205461036c906001906001600160a01b03163b610ced565b600080805b836060015151811015610587576105698460600151828151811061055c5761055c610b31565b60200260200101516104d4565b6105739083610b5d565b91508061057f81610b75565b915050610536565b50806000036105a95760405163067b6a0f60e01b815260040160405180910390fd5b8083526040516105d5906105c1908590602001610a50565b6040516020818303038152906040526103c7565b9150817f781d09314f163fac6f270ad8ff8282008540d3ce7baccdafa9dbbc1fea63eb24828560200151866040015160405161061393929190610d04565b60405180910390a250919050565b6001818154811061063157600080fd5b600091825260209091200154905081565b606061036c8260016000196106b7565b60008061067d836040516020016106699190610d39565b60405160208183030381529060405261076d565b90508051602082016000f091506001600160a01b0382166106b15760405163046a55db60e11b815260040160405180910390fd5b50919050565b6060833b60008190036106da575050604080516020810190915260008152610766565b808411156106f8575050604080516020810190915260008152610766565b8383101561072a5760405163162544fd60e11b8152600481018290526024810185905260448101849052606401610342565b838303848203600082821061073f5782610741565b815b60408051603f8301601f19168101909152818152955090508087602087018a3c505050505b9392505050565b6060815182604051602001610783929190610d5f565b6040516020818303038152906040529050919050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156107d2576107d2610799565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561080157610801610799565b604052919050565b600067ffffffffffffffff82111561082357610823610799565b50601f01601f191660200190565b600061084461083f84610809565b6107d8565b905082815283838301111561085857600080fd5b828260208301376000602084830101529392505050565b600082601f83011261088057600080fd5b61076683833560208501610831565b600067ffffffffffffffff8211156108a9576108a9610799565b5060051b60200190565b600060208083850312156108c657600080fd5b823567ffffffffffffffff808211156108de57600080fd5b90840190608082870312156108f257600080fd5b6108fa6107af565b82358152838301358281111561090f57600080fd5b61091b8882860161086f565b858301525060408301358281111561093257600080fd5b61093e8882860161086f565b60408301525060608301358281111561095657600080fd5b80840193505086601f84011261096b57600080fd5b8235915061097b61083f8361088f565b82815260059290921b8301840191848101908884111561099a57600080fd5b938501935b838510156109b85784358252938501939085019061099f565b6060830152509695505050505050565b60005b838110156109e35781810151838201526020016109cb565b838111156109f2576000848401525b50505050565b60008151808452610a108160208601602086016109c8565b601f01601f19169290920160200192915050565b60208152600061076660208301846109f8565b600060208284031215610a4957600080fd5b5035919050565b600060208083528351818401528084015160806040850152610a7560a08501826109f8565b90506040850151601f1980868403016060870152610a9383836109f8565b6060880151878203909201608088015281518082529185019350600092508401905b80831015610ad55783518252928401926001929092019190840190610ab5565b509695505050505050565b600060208284031215610af257600080fd5b813567ffffffffffffffff811115610b0957600080fd5b8201601f81018413610b1a57600080fd5b610b2984823560208401610831565b949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115610b7057610b70610b47565b500190565b600060018201610b8757610b87610b47565b5060010190565b600082601f830112610b9f57600080fd5b8151610bad61083f82610809565b818152846020838601011115610bc257600080fd5b610b298260208301602087016109c8565b600082601f830112610be457600080fd5b81516020610bf461083f8361088f565b82815260059290921b84018101918181019086841115610c1357600080fd5b8286015b84811015610ad55780518352918301918301610c17565b600060208284031215610c4057600080fd5b815167ffffffffffffffff80821115610c5857600080fd5b9083019060808286031215610c6c57600080fd5b610c746107af565b82518152602083015182811115610c8a57600080fd5b610c9687828601610b8e565b602083015250604083015182811115610cae57600080fd5b610cba87828601610b8e565b604083015250606083015182811115610cd257600080fd5b610cde87828601610bd3565b60608301525095945050505050565b600082821015610cff57610cff610b47565b500390565b838152606060208201526000610d1d60608301856109f8565b8281036040840152610d2f81856109f8565b9695505050505050565b6000815260008251610d528160018501602087016109c8565b9190910160010192915050565b606360f81b815260e083901b6001600160e01b03191660018201526880600e6000396000f360b81b60058201528151600090610da281600e8501602087016109c8565b91909101600e01939250505056fea164736f6c634300080d000a";

type FileStoreConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FileStoreConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FileStore__factory extends ContractFactory {
  constructor(...args: FileStoreConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FileStore> {
    return super.deploy(overrides || {}) as Promise<FileStore>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FileStore {
    return super.attach(address) as FileStore;
  }
  override connect(signer: Signer): FileStore__factory {
    return super.connect(signer) as FileStore__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FileStoreInterface {
    return new utils.Interface(_abi) as FileStoreInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FileStore {
    return new Contract(address, _abi, signerOrProvider) as FileStore;
  }
}
