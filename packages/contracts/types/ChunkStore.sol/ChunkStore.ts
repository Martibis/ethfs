/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ChunkStoreInterface extends utils.Interface {
  functions: {
    "_checksums(uint256)": FunctionFragment;
    "_chunks(bytes32)": FunctionFragment;
    "checksumExists(bytes32)": FunctionFragment;
    "chunkSize(bytes32)": FunctionFragment;
    "getPointer(bytes32)": FunctionFragment;
    "getPointers(bytes32[])": FunctionFragment;
    "readBytes(uint256,bytes32[])": FunctionFragment;
    "readChunk(bytes32)": FunctionFragment;
    "readChunks(bytes32[])": FunctionFragment;
    "writeChunk(address)": FunctionFragment;
    "writeChunk(bytes)": FunctionFragment;
    "writeChunks(bytes[])": FunctionFragment;
    "writeChunks(address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_checksums"
      | "_chunks"
      | "checksumExists"
      | "chunkSize"
      | "getPointer"
      | "getPointers"
      | "readBytes"
      | "readChunk"
      | "readChunks"
      | "writeChunk(address)"
      | "writeChunk(bytes)"
      | "writeChunks(bytes[])"
      | "writeChunks(address[])"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_checksums",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_chunks",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "checksumExists",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "chunkSize",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPointer",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPointers",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "readBytes",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "readChunk",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "readChunks",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "writeChunk(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "writeChunk(bytes)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "writeChunks(bytes[])",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "writeChunks(address[])",
    values: [PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(functionFragment: "_checksums", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_chunks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checksumExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chunkSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPointer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPointers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "readBytes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readChunk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readChunks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "writeChunk(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writeChunk(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writeChunks(bytes[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writeChunks(address[])",
    data: BytesLike
  ): Result;

  events: {
    "NewChunk(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewChunk"): EventFragment;
}

export interface NewChunkEventObject {
  checksum: string;
  size: BigNumber;
}
export type NewChunkEvent = TypedEvent<
  [string, BigNumber],
  NewChunkEventObject
>;

export type NewChunkEventFilter = TypedEventFilter<NewChunkEvent>;

export interface ChunkStore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChunkStoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _checksums(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _chunks(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    checksumExists(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    chunkSize(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { size: BigNumber }>;

    getPointer(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { pointer: string }>;

    getPointers(
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { pointers: string[] }>;

    readBytes(
      size: PromiseOrValue<BigNumberish>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    readChunk(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { chunk: string }>;

    readChunks(
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { chunks: string[] }>;

    "writeChunk(address)"(
      pointer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "writeChunk(bytes)"(
      chunk: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "writeChunks(bytes[])"(
      chunks: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "writeChunks(address[])"(
      pointers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _checksums(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  _chunks(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  checksumExists(
    checksum: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  chunkSize(
    checksum: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPointer(
    checksum: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPointers(
    checksums: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  readBytes(
    size: PromiseOrValue<BigNumberish>,
    checksums: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<string>;

  readChunk(
    checksum: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  readChunks(
    checksums: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  "writeChunk(address)"(
    pointer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "writeChunk(bytes)"(
    chunk: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "writeChunks(bytes[])"(
    chunks: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "writeChunks(address[])"(
    pointers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _checksums(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    _chunks(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    checksumExists(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    chunkSize(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPointer(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPointers(
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    readBytes(
      size: PromiseOrValue<BigNumberish>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string>;

    readChunk(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    readChunks(
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    "writeChunk(address)"(
      pointer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "writeChunk(bytes)"(
      chunk: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "writeChunks(bytes[])"(
      chunks: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    "writeChunks(address[])"(
      pointers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<string[]>;
  };

  filters: {
    "NewChunk(bytes32,uint256)"(
      checksum?: PromiseOrValue<BytesLike> | null,
      size?: null
    ): NewChunkEventFilter;
    NewChunk(
      checksum?: PromiseOrValue<BytesLike> | null,
      size?: null
    ): NewChunkEventFilter;
  };

  estimateGas: {
    _checksums(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _chunks(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checksumExists(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chunkSize(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPointer(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPointers(
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readBytes(
      size: PromiseOrValue<BigNumberish>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readChunk(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readChunks(
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "writeChunk(address)"(
      pointer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "writeChunk(bytes)"(
      chunk: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "writeChunks(bytes[])"(
      chunks: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "writeChunks(address[])"(
      pointers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _checksums(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _chunks(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checksumExists(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chunkSize(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPointer(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPointers(
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readBytes(
      size: PromiseOrValue<BigNumberish>,
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readChunk(
      checksum: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readChunks(
      checksums: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "writeChunk(address)"(
      pointer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "writeChunk(bytes)"(
      chunk: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "writeChunks(bytes[])"(
      chunks: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "writeChunks(address[])"(
      pointers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
